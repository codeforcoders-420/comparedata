 private static void writeToExcel(Map<String, Map<String, Double>> procCodeRates) {
        // Create a new workbook and sheet
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("ProcCode Rates");

        // Create header row
        Row headerRow = sheet.createRow(0);
        Cell procHeader = headerRow.createCell(0);
        procHeader.setCellValue("Proc");
        Cell mod1Header = headerRow.createCell(1);
        mod1Header.setCellValue("Mod");
        Cell mod2Header = headerRow.createCell(2);
        mod2Header.setCellValue("Mod 2");

        // Get unique months and years from the map and sort them in chronological order
        Set<String> allMonths = new TreeSet<>(new MonthYearComparator());
        for (Map<String, Double> monthlyRates : procCodeRates.values()) {
            allMonths.addAll(monthlyRates.keySet());
        }

        // Write the sorted months as header cells starting from the 4th column
        int colIndex = 3;  // Start the months' columns after Proc, Mod, Mod 2
        for (String month : allMonths) {
            Cell monthHeader = headerRow.createCell(colIndex++);
            monthHeader.setCellValue(month);
        }

        // Fill the rows with proc codes, mods, and rates
        int rowIndex = 1;
        for (String procCodeKey : procCodeRates.keySet()) {
            Row row = sheet.createRow(rowIndex++);

            // Split the procCodeKey into Proc, Mod, Mod 2
            String[] procMods = procCodeKey.split("\\+");
            if (procMods.length == 3) {
                row.createCell(0).setCellValue(procMods[0]); // Proc
                row.createCell(1).setCellValue(procMods[1]); // Mod
                row.createCell(2).setCellValue(procMods[2]); // Mod 2
            }

            // Add the monthly rates in the sorted column order
            Map<String, Double> monthlyRates = procCodeRates.get(procCodeKey);
            colIndex = 3;  // Start after the first three columns (Proc, Mod, Mod 2)
            for (String month : allMonths) {
                Cell rateCell = row.createCell(colIndex++);
                Double rate = monthlyRates.get(month);
                if (rate != null) {
                    rateCell.setCellValue(rate);
                } else {
                    rateCell.setCellValue("N/A");  // Mark missing rates as "N/A"
                }
            }
        }

        // Autosize columns for better readability
        for (int i = 0; i < allMonths.size() + 3; i++) {
            sheet.autoSizeColumn(i);
        }

        // Write the output to an Excel file
        try (FileOutputStream fileOut = new FileOutputStream("Output_Rates.xlsx")) {
            workbook.write(fileOut);
            System.out.println("Output Excel file 'Output_Rates.xlsx' written successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                workbook.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Comparator class to sort months and years in chronological order
    static class MonthYearComparator implements Comparator<String> {
        private final List<String> monthOrder = Arrays.asList("Jan", "April", "July", "Oct");

        @Override
        public int compare(String monthYear1, String monthYear2) {
            // Split the input strings into month and year parts
            String[] parts1 = monthYear1.split(" ");
            String[] parts2 = monthYear2.split(" ");

            String month1 = parts1[0];
            int year1 = Integer.parseInt(parts1[1]);

            String month2 = parts2[0];
            int year2 = Integer.parseInt(parts2[1]);

            // Compare years first
            if (year1 != year2) {
                return Integer.compare(year1, year2);
            }

            // If years are the same, compare months based on the custom order
            return Integer.compare(monthOrder.indexOf(month1), monthOrder.indexOf(month2));
        }
    }

    public static void main(String[] args) {
        // Example usage of writeToExcel with mock data
        Map<String, Map<String, Double>> procCodeRates = // Your logic to generate the map
        writeToExcel(procCodeRates);
    }